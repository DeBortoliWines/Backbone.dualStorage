// Generated by CoffeeScript 1.7.1
(function() {
  var Collection, Model, backboneSync, dualSync, localStorage, localSync, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  backboneSync = window.backboneSync, localSync = window.localSync, dualSync = window.dualSync, localStorage = window.localStorage;

  _ref = {}, Collection = _ref.Collection, Model = _ref.Model;

  describe('offline detection', function() {
    this.timeout(100);
    beforeEach(function() {
      localStorage.clear();
      Model = (function(_super) {
        __extends(Model, _super);

        function Model() {
          return Model.__super__.constructor.apply(this, arguments);
        }

        Model.prototype.idAttribute = '_id';

        Model.prototype.urlRoot = 'things/';

        return Model;

      })(Backbone.Model);
      return Collection = (function(_super) {
        __extends(Collection, _super);

        function Collection() {
          return Collection.__super__.constructor.apply(this, arguments);
        }

        Collection.prototype.model = Model;

        Collection.prototype.url = Model.prototype.urlRoot;

        return Collection;

      })(Backbone.Collection);
    });
    return describe('Backbone.DualStorage.offlineStatusCodes', function() {
      beforeEach(function() {
        return this.originalOfflineStatusCodes = Backbone.DualStorage.offlineStatusCodes;
      });
      afterEach(function() {
        return Backbone.DualStorage.offlineStatusCodes = this.originalOfflineStatusCodes;
      });
      describe('as an array property', function() {
        it('acts as offline when a server response code is in included in the array', function(done) {
          var model, saved;
          Backbone.DualStorage.offlineStatusCodes = [500, 502];
          model = new Model({
            _id: 1
          });
          saved = $.Deferred();
          model.save('name', 'original name saved locally', {
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            var fetchedLocally, response;
            model = new Model({
              _id: 1
            });
            fetchedLocally = $.Deferred();
            response = 'response ignored because of the "offline" status code';
            model.fetch({
              errorStatus: 500,
              serverResponse: {
                name: response
              },
              success: function() {
                return fetchedLocally.resolve();
              }
            });
            return fetchedLocally.done(function() {
              expect(model.get('name')).to.equal('original name saved locally');
              return done();
            });
          });
        });
        return it('defaults to [408, 502] (Request Timeout, Bad Gateway)', function() {
          return expect(Backbone.DualStorage.offlineStatusCodes).to.eql([408, 502]);
        });
      });
      describe('as an array returned by a method', function() {
        return it('acts as offline when a server response code is in included in the array', function(done) {
          var model, saved, serverReportsToBeOffline;
          serverReportsToBeOffline = function(xhr) {
            var _ref1;
            if ((xhr != null ? (_ref1 = xhr.response) != null ? _ref1['error_message'] : void 0 : void 0) === 'Offline for maintenance') {
              return [200];
            } else {
              return [];
            }
          };
          Backbone.DualStorage.offlineStatusCodes = serverReportsToBeOffline;
          model = new Model({
            _id: 1
          });
          saved = $.Deferred();
          model.save('name', 'original name saved locally', {
            success: function() {
              return saved.resolve();
            }
          });
          return saved.done(function() {
            var fetchedLocally;
            model = new Model({
              _id: 1
            });
            fetchedLocally = $.Deferred();
            model.fetch({
              serverResponse: {
                _id: 1,
                name: 'unknown',
                error_message: 'Offline for maintenance'
              },
              success: function() {
                return fetchedLocally.resolve();
              }
            });
            return fetchedLocally.done(function() {
              expect(model.get('name')).to.equal('original name saved locally');
              return done();
            });
          });
        });
      });
      return it('treats an ajax response status code 0 as offline, regardless of offlineStatusCodes', function(done) {
        var model, saved;
        model = new Model({
          _id: 1
        });
        saved = $.Deferred();
        model.save('name', 'original name saved locally', {
          success: function() {
            return saved.resolve();
          }
        });
        return saved.done(function() {
          var fetchedLocally, response;
          model = new Model({
            _id: 1
          });
          fetchedLocally = $.Deferred();
          response = 'response ignored because of the "offline" status code';
          model.fetch({
            errorStatus: 0,
            serverResponse: {
              name: response
            },
            success: function() {
              return fetchedLocally.resolve();
            }
          });
          return fetchedLocally.done(function() {
            expect(model.get('name')).to.equal('original name saved locally');
            return done();
          });
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=offline_detection_spec.map
